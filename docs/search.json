[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "texto de prueba"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "RNAseq2024",
    "section": "",
    "text": "Date: Date and time\nLugar: Centro de Investigaciones Biológicas del Noroeste, S.C.\nInstructores: Miguel A. Tripp Valdez, Pavel E. Galindo Torres"
  },
  {
    "objectID": "index.html#temario-del-curso",
    "href": "index.html#temario-del-curso",
    "title": "RNAseq2024",
    "section": "Temario del curso",
    "text": "Temario del curso\n\nMÓDULO I: Introducción a R base\n1.1 Conceptos básicos (La consola en R y Rstudio, ejecutar, llamar, correr y devolver, objetos, constantes y variables, funciones, documentación, directorio de trabajo, sesión, paquetes y scripts).\n1.2 Tipos de datos (Numérico, entero, carácter, factor, lógico, nulo, NA).\n1.3 Operadores (Aritméticos, relacionales, lógicos y de asignación).\n1.4 Estructuras de datos (Vectores, matríces, arreglos, marcos de datos, listas y coerción).\n1.5 Subconjuntos (vectores, matrices y listas).\n1.6 Funciones básicas (getwd(), setwd(), length(), sort(), min(), max(), c(), seq(), t(), mean(), sd(), sum(), etc.).\n1.7 Importar y exportar datos.\n1.7 Instalar y cargar librerias\n1.7 Creación de proyectos en Rstudio\n\n\nMÓDULO II: Introducción a GNU/Linux\n2.1 Breve historia de GNU/Linux, conociendo la terminal.\n2.2 Comandos básicos.\n2.3 Flujos de control básicos (if-else, for, while).\n2.4 Gestionadores de paquetes.\n2.5 Instalación de paquetes y manejo de ambientes conda (conda, miniconda, homebrew).\n2.6 Acceso a servidores remotos.\n\n\nModulo IV: Análisis de datos de lecturas cortas (Illumina).\n4.1 Introducción a las tecnologías de secuenciación modernas.\n4.2 Control de calidad de datos (Tipos de datos, FastQC/MultiQC).\n4.3 Corte de secuencias (Trimmomatic, cutadapt, fastx-toolkit).\n4.4 Ensamble con genoma guiado y de novo (Trinity).\n4.5 Valoración del ensamble (Transrate, BUSCO).\n4.6 Análisis de genes expresados diferencialmente (Alineamiento de lecturas y estimación de la abundancia, análisis de genes y transcritos expresados diferencialmente: EdgeR, Visualización de resultados).\n4.7 Anotación funcional con trinotate (BLAST, Ontología de genes, análisis de enriquecimientos funcionales (GO, KEGG), Reactome, etc.\n4.8 Análisis de redes de proteínas (STRING)."
  },
  {
    "objectID": "1_control_calidad.html",
    "href": "1_control_calidad.html",
    "title": "Control de Calidad",
    "section": "",
    "text": "Moverse a la carpeta curso2022 y crear carpeta de trabajo Transcriptomica y acceder.\ncd curso2020\nmkdir Transcriptomica \ncd Transcriptomica"
  },
  {
    "objectID": "1_control_calidad.html#lecturas-de-prueba",
    "href": "1_control_calidad.html#lecturas-de-prueba",
    "title": "Control de Calidad",
    "section": "Lecturas de prueba",
    "text": "Lecturas de prueba\nAntes de análizar las secuencias de nuestro estudio, vamos a ver unos ejemplos de cálidad de secuencias. Estas secuencias se obtuvieron de bases de datos publicas. Ojo: Estas lecturas solo son una submuestra de las originales, por lo que son mucho mas pequeñas.\n\nCreamos una carpeta parental llamada FASTQC_TEST y dentro de esta, generamos las carpetas secuencias, FASTQC_PRE y FASTQC_POST.\n\n\nmkdir -p fastqc_test/{secuencias,fastqc_pre,fastqc_post}\n\n\nDentro de la carpeta secuenciasvamos a crear un link simbólico de las secuencias que serán utilizadas.\n\n\nRecuerda la sintaxis ln -s ORIGEN DESTINO\n\n\ncd fastqc_test/secuencias\n\n ln -s /LUSTRE/bioinformatica_data/genomica_funcional/Tripp/Curso_2022/FASTQC_test/secuencias/*.fastq ./\nls\n\n\n\n\n\n\n\nWarning\n\n\n\n\nPregunta: ¿Como sabe cuantas lecturas tiene cada archivo?\n\nPodemos utilizar la función grep para buscar un caracter en común de todas las lecturas y hacer pipe para contar el número de lineas que tienen ese caracter\nPor ejemplo: las lectutas SRR7096024_1.fastq, podemos utilizar el ID @SRR7096024_1\n\ncat SRR7096024_1.fastq | grep \"^@SRR70\" | wc -l\n\n\n\n\n:::info Manejador de tareas SLURM\nDentro del curso, muchos de los procesos que se correrar son muy demantantes en cuanto a poder computacional, por lo que para evitar que el cluster colapse, se utiliza un manejador de tareas el cual nos asigna los recursos necesarios cuando haya disponibilidad.\nEn el curso utilizaremos el manejador de tareas de dos formas:\n\nUtilizando archivos ejecutables (slrm) Estos archivos continenen todas las instrucciones para poder correr un programa tal como el nombre de la cola, la cantidad de memoria y numero de nucleos que se requiere asi como los nombres del output. Un ejemplo del formato de estos archivos es:\n\n\n#!/bin/bash \n#SBATCH -p cicese\n#SBATCH --job-name=fastqc\n#SBATCH --output=fastqc-%j.log\n#SBATCH --error=fastqc-%j.err\n#SBATCH -N 1\n#SBATCH --ntasks-per-node=8\n#SBATCH -t 6-00:00:00\n\n#Resto de las instrucciones\n\n\nUtilizando el script accesa-nodo el cual te asignara un nodo durante el tiempo que estemos trabajando. Es importante que cada que termines la sesión te desconectes del nodo (exit) ya que seguiras ocupando espacio aún si no estas haciendo nada\n\n::: —\n\nPosteriormente ejecutamos FASTQC. Para esto nos vamos a colocar en la carpeta fastqc_pre y generamos el siguiente slrm\n\n\n#!/bin/bash\n#SBATCH -p cicese\n#SBATCH --job-name=fastqc\n#SBATCH --output=fastqc-%j.log\n#SBATCH --error=fastqc-%j.err\n#SBATCH -N 1\n#SBATCH --ntasks-per-node=8\n#SBATCH -t 6-00:00:00\n\n\n# Exportar la ruta de FastQC_v0.11.7\nexport PATH=$PATH:/LUSTRE/apps/bioinformatica/FastQC_v0.11.7\n\nfastqc ../secuencias/*.fastq -t 8 -o ./\n\n\nDescargamos los reportes HTML generados a nuestra computadora en la carpeta de trabajo para revisarlo. Para esto, abrimos una nueva ventana de la terminal y vamos a generar una carpeta llamada FASTQC_TEST\n\n\n$LAPTOP-NNNNN:$mkdir -p FASTQC_TEST/{FASTQC_PRE,FASTQC_POST}\n\ncd FASTQC_TEST/FASTQC_PRE\n\n\nRecuerda la sintaxis: $scp curso##@omica:ruta/de/la/carpeta/*.html ./\n\n\nRevisión individual de archivos .html en navegador firefox o en el navegador que tengan instalado, para verificar la calidad de las lecturas de secuenciación.\n\nfirefox SRR10858532_1_fastqc.html\nfirefox SRR10858532_2_fastqc.html\n\n:bulb: NOTA: Si estas utilizando ubuntu app, dentro de la carpeta de trabajo ejecuta\n$explorer.exe SRR10858532_1_fastqc.html\n\n\nRevisa cada uno de los reportes y discute cuales son las diferencias entre la calidad de las lecturas"
  },
  {
    "objectID": "1_control_calidad.html#limpieza-y-control-de-calidad-de-las-lecturas",
    "href": "1_control_calidad.html#limpieza-y-control-de-calidad-de-las-lecturas",
    "title": "Control de Calidad",
    "section": "2. Limpieza y control de calidad de las lecturas",
    "text": "2. Limpieza y control de calidad de las lecturas\nAhora utilizaremos el Programa Trimmomatic para cortar y filtrar las lecturas con baja calidad asi como eliminar adaptadores que puderan haber permanecido en la lecturas\n\nDentro de tu carpeta de fastqc_test en OMICA, crear la carpeta Trimmomatic en la carpeta Transcriptomica y acceder a ella.\n\nCrear la carpeta TRIMMOMATIC en la carpeta Transcriptomica y acceder a ella.\n\ncd ..\nmkdir trimmomatic\ncd trimmomatic\n\n\nGenerar el script al cual llamaremos 2.trimmomatic.slrm\n\n\nnano 2.trimmomatic.slrm\n\nEl slrm debe contener lo siguiente:\n\n#!/bin/bash\n#########################################################\n#TRIMOMMATIC\n\n## Directivas\n#SBATCH --job-name=qtrim\n#SBATCH --output=trimmomatic-%j.log\n#SBATCH --error=trimmomatic-%j.err\n#SBATCH -N 1\n#SBATCH --mem=20GB\n#SBATCH --ntasks-per-node=8\n#SBATCH -t 6-00:00:00\n#SBATCH -p cicese\n\n\n# Ruta a TRIMMOMATIC\nTRIMMOMATIC=/LUSTRE/bioinformatica_data/genomica_funcional/bin/Trimmomatic-0.36\n\n#Ruta al archivo con los adaptadores\ntrueseq=\"$TRIMMOMATIC/adapters/TruSeq3-PE-2.fa\"\n\n\n\ncd ${SLURM_SUBMIT_DIR}\n\njava -jar $TRIMMOMATIC/trimmomatic-0.36.jar PE ../secuencias/SRR7096024_1.fastq ../secuencias/SRR7096024_2.fastq -baseout trimmed_SRR7096024.fastq \\\nILLUMINACLIP:$trueseq:2:30:10:8:true LEADING:5 TRAILING:5 SLIDINGWINDOW:4:15 MINLEN:36\n\njava -jar $TRIMMOMATIC/trimmomatic-0.36.jar PE ../secuencias/SRR10858532_1.fastq ../secuencias/SRR10858532_2.fastq -baseout trimmed_SRR10858532.fastq \\\nILLUMINACLIP:$trueseq:2:30:10:8:true LEADING:5 TRAILING:5 SLIDINGWINDOW:4:15 MINLEN:36\n\njava -jar $TRIMMOMATIC/trimmomatic-0.36.jar PE ../secuencias/rv06m_S8_L001_subset_1.fastq ../secuencias/rv06m_S8_L001_subset_2.fastq -baseout trimmed_rv06m_S8_L001.fastq \\\nILLUMINACLIP:$trueseq:2:30:10:8:true LEADING:5 TRAILING:5 SLIDINGWINDOW:4:15 MINLEN:36\n\n\nexit 0\n\n\nCorrer el script trimmomatic.slrm\n\n\nsbatch 2.trimmomatic.slrm\nsqueue\n\n\nGenerar dos carpetas para colocar las lecturas Paired y las Unpaired. Posteriormente, mueve todas las lecturas a sus respectivas carpetas usando el comando mv\n\n\nmkdir TRIMM_U TRIMM_P\n\nmv *P.fastq TRIMM_P/\nmv *U.fastq TRIMM_U/\n\n\nAhora evalua la calidad de estas lecturas limpias con FastQC dentro de la carpeta FASTQC_TEST/FASTQC_POST. Para esto, puedes generar un nuevo archivo slrm para usar FastQC\n\n\n#!/bin/bash\n#SBATCH -p cicese\n#SBATCH --job-name=fastqc\n#SBATCH --output=fastqc-%j.log\n#SBATCH --error=fastqc-%j.err\n#SBATCH -N 1\n#SBATCH --ntasks-per-node=8\n#SBATCH -t 6-00:00:00\n\n\n# Exportar la ruta de FastQC_v0.11.7\nexport PATH=$PATH:/LUSTRE/apps/bioinformatica/FastQC_v0.11.7\n\n\nfastqc ../trimmomatic/TRIMM_P/*.fastq -t 8 -o ./\n\n\nFinalmente, transfiere los reportes nuevos a tu computadora para revisarlos\nAhora vamos a repetir los pasos del 3 al 7 pero con la misma muestra pero usando parametros mas riguroso:\nGenerar el script al cual llamaremos trimmomatic_rig.slrm\n\n\nnano run_trimmomatic_rig.slrm\n\nEl slrm debe contener lo siguiente:\n\n#!/bin/sh\n\n###Directivas\n\n#SBATCH -p cicese\n#SBATCH --job-name=trimmomatic\n#SBATCH --output=trimmomatic-%j.log\n#SBATCH --error=trimmomatic-%j.err\n#SBATCH -N 1\n#SBATCH --ntasks-per-node=8\n#SBATCH -t 06-00:00:00\n\n\nTRIM=/LUSTRE/bioinformatica_data/genomica_funcional/bin/Trimmomatic-0.36\n\ncd ${SLURM_SUBMIT_DIR}\n\njava -jar $TRIM/trimmomatic-0.36.jar PE ../SRR7096024_1.fastq ../SRR7096024_2.fastq -baseout trimmed_rig_SRR7096024.fastq \\\nILLUMINACLIP:TruSeq3-PE-2.fa:2:30:10:8:true LEADING:5 TRAILING:5 SLIDINGWINDOW:4:20 MINLEN:36 HEADCROP:5\n\nexit 0\n\nTransfiere los archivos a tu computadora para visualizarlos. Discute los principales cambios\n\nFinalmente, corre los pasos del 3 al 7 incluyendo todas las muestras."
  },
  {
    "objectID": "1_control_calidad.html#análisis-de-calidad-de-las-lecturas-con-fastqc-y-multiqc",
    "href": "1_control_calidad.html#análisis-de-calidad-de-las-lecturas-con-fastqc-y-multiqc",
    "title": "Control de Calidad",
    "section": "2.1 Análisis de calidad de las lecturas con FastQC y MultiQC",
    "text": "2.1 Análisis de calidad de las lecturas con FastQC y MultiQC\n\nFASTQC\nEn la carpeta de transcriptomica, crear carpeta FASTQC y con las subcarpetas FASTQC_PRE y FASTQC_POST. Acceder a carpeta FASTQC_PRE ::: {.cell}\ncd ..\nmkdir -p FASTQC/{FASTQC_PRE,FASTQC_POST}\ncd FASTQC/FASTQC_PRE/\n::: Realizar análisis de calidad de las secuencias con el programa FastQC. Se obtendrán N archivos .html y fastqc.zip . Sintaxis fastqc [-t # ] [path to file] [-o output dir]\n\n\n\n\n\n\nWarning\n\n\n\nNOTA: Para realizar este paso es posible utilizar el script accesa-nodo para solicitar un nodo en el cluster sin necesidad de hacer un archivo slurm\n\n\n\nfastqc -t 8 ../../RAW_READS/*.fastq.gz -o ./    \n\n\nls      \n\nA continuación, vamos a importar los archivos .html a nuestra PC. Para ello sigan las instrucciones siguientes:\nPaso 1. Abrir una nueva terminal para Paso 2. Acceder a nuestra carpeta de transcrptomica ::: {.cell}\n$ cd Documentos/curso2022/transrciptomica\n::: Paso 3. Crear en transcriptomica un directorio con el nombre FASTQC y dentro de él, dos que se llamen FASTQC_PRE y FASTQC_POST. ::: {.cell}\n$ mkdir -p FASTQC/{FASTQC_PRE,FASTQC_POST}\n::: Paso 4. Acceder al directorio FASTQC_PRE ::: {.cell}\n$ cd FASTQC_PRE\n::: Paso 5. Copiar dentro de este directorio todos los archivos .html que generamos en el cluster. ::: {.cell}\n$ scp curso01@omica:/home/curso01/curso2022/trascriptomica/FASTQC/FASTQC_PRE/*.html ./\n::: Paso 6. Revisión individual de archivos .html en navegador firefox o en el navegador que tengan instalado, para verificar la calidad de las lecturas de secuenciación. ::: {.cell}\n$ firefox Ctrl_rep1_500k_R1_fastqc.html \n:::\n\n:bulb: Si estas trabajando con Ubuntu app, puedes buscar directamente los archivos en la carpeta, pero si deseas abrir chrome directamente de la terminal ejecuta la siguiente linea:\n\nexport chrome=“/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe”\n\n\n\nMULTIQC\nSi se quiere hacer una comparación entre todos los valores de calidad de las secuencias, se puede utilizar el programa MultiQC que utiliza los archivos generados por FastQC. Se requiere un ambiente para el programa que está basado en python 2.7\n\n\n\n\n\n\nWarning\n\n\n\nPara poder utilizar MultiQC es necesario cargar el modulo de python 2.7 y posteriormente activar el ambiente donde esta MultiQC\n\n# Para cargar el ambiente conda\n$ module load python-2.7-anaconda       \n\n# Activar ambiente\n$ source activate multiqc_py2.7                 \n\n# Para desactivar ambiente:\n$ source deactivate multiqc_py2.7                   \n\n\n\nDentro de la carpeta de FASTQ_PRE crear una carpeta llamada MULTIQC. Entramos a esta carpeta y corremos MultiQC activando el ambiente multiqc_py2.7. Se generaran las carpetas multiqc_data, multiqc_plots y multiqc_reports.html. Revisar archivo .html. Al finalizar desactivar el ambiente multiqc_py2.7. ::: {.cell}\n$ mkdir MULTIQC\n$ cd MULTIQC/\n$ multiqc ../*.zip -o ./ --data-format tsv --export --title \"Analisis pre trimming\"\n::: ::: {.cell}\n$ source deactivate multiqc_py2.7\n::: Revisar el archivo .html obtenido con MultiQC dentro de la carpeta PRE y descargarlo a su computadora personal siguiendo los pasos descritos anteriormente\n\ncd Documentos/curso2022/transrciptomica/FASTQC_PRE\nmkdir Multiqc\ncd Multiqc\nscp curso01@omica:/home/curso01/curso2022/trascriptomica/FASTQC/FASTQC_PRE/Multiqc/multiqc_report.html ./\n\n3. Revisar el archivo .hmtl obtenido con el programa MultiQC ::: {.cell}\nfirefox multiqc_report.html\n::: 4. Cerrar esta terminal en cuanto se termine de revisar el archivo .html"
  },
  {
    "objectID": "1_control_calidad.html#limpieza-y-eliminación-de-lecturas-de-mala-calidad-con-trimmomatic",
    "href": "1_control_calidad.html#limpieza-y-eliminación-de-lecturas-de-mala-calidad-con-trimmomatic",
    "title": "Control de Calidad",
    "section": "2.2. Limpieza y eliminación de lecturas de mala calidad con Trimmomatic",
    "text": "2.2. Limpieza y eliminación de lecturas de mala calidad con Trimmomatic\n\n\n\n\n\n\nWarning\n\n\n\nComo utilizaremos trimmomatic con un archivo slurm en este punto debes salir del nodo\n\n\nEn este paso se usará el programa Trimmomatic, para eliminar las secuencias de mala calidad, así como índices o adaptadores de secuenciación que pudieran haber quedado.\nCrear la carpeta TRIMMOMATIC en la carpeta transcriptomica y acceder a ella.\n\ncd ../../\nmkdir TRIMMOMATIC\ncd TRIMMOMATIC\n\nGenerar el script al cual llamaremos trimmomatic.slrm\n\nnano trimmomatic.slrm\n\nEl slrm debe contener lo siguiente:\n\n#!/bin/bash\n#########################################################\n#TRIMOMMATIC\n\n## Directivas\n#SBATCH --job-name=qtrim\n#SBATCH --output=trimmomatic-%j.log\n#SBATCH --error=trimmomatic-%j.err\n#SBATCH -N 1\n#SBATCH --mem=20GB\n#SBATCH --ntasks-per-node=8\n#SBATCH -t 6-00:00:00\n#SBATCH -p cicese\n\n\n# Ruta a TRIMMOMATIC\nTRIMMOMATIC=/LUSTRE/bioinformatica_data/genomica_funcional/bin/Trimmomatic-0.36\n\n#Ruta al archivo con los adaptadores\ntrueseq=\"$TRIMMOMATIC/adapters/TruSeq3-PE-2.fa\"\n\n\ncd ${SLURM_SUBMIT_DIR}\n\njava -jar $TRIMMOMATIC/trimmomatic-0.36.jar PE ../RAW_READS/Ctrl_rep1_500k_R1.fastq.gz ../RAW_READS/Ctrl_rep1_500k_R2.fastq.gz -baseout Ctrl_rep1.fastq.gz \\\nILLUMINACLIP:$trueseq:2:30:10:8:true LEADING:5 TRAILING:5 SLIDINGWINDOW:4:15 MINLEN:36\n\njava -jar $TRIMMOMATIC/trimmomatic-0.36.jar PE ../RAW_READS/Ctrl_rep2_500k_R1.fastq.gz ../RAW_READS/Ctrl_rep2_500k_R2.fastq.gz -baseout Ctrl_rep2.fastq.gz \\\nILLUMINACLIP:$trueseq:2:30:10:8:true LEADING:5 TRAILING:5 SLIDINGWINDOW:4:15 MINLEN:36\n\njava -jar $TRIMMOMATIC/trimmomatic-0.36.jar PE ../RAW_READS/T1_rep1_500k_R1.fastq.gz ../RAW_READS/T1_rep1_500k_R2.fastq.gz -baseout T1_rep1.fastq.gz \\\nILLUMINACLIP:$trueseq:2:30:10:8:true LEADING:5 TRAILING:5 SLIDINGWINDOW:4:15 MINLEN:36\n\njava -jar $TRIMMOMATIC/trimmomatic-0.36.jar PE ../RAW_READS/T1_rep2_500k_R1.fastq.gz ../RAW_READS/T1_rep2_500k_R2.fastq.gz -baseout T1_rep2.fastq.gz \\\nILLUMINACLIP:$trueseq:2:30:10:8:true LEADING:5 TRAILING:5 SLIDINGWINDOW:4:15 MINLEN:36\n\njava -jar $TRIMMOMATIC/trimmomatic-0.36.jar PE ../RAW_READS/T2_rep1_500k_R1.fastq.gz ../RAW_READS/T2_rep1_500k_R2.fastq.gz -baseout T2_rep1.fastq.gz \\\nILLUMINACLIP:$trueseq:2:30:10:8:true LEADING:5 TRAILING:5 SLIDINGWINDOW:4:15 MINLEN:36\n\njava -jar $TRIMMOMATIC/trimmomatic-0.36.jar PE ../RAW_READS/T2_rep2_500k_R1.fastq.gz ../RAW_READS/T2_rep2_500k_R2.fastq.gz -baseout T2_rep2.fastq.gz \\\nILLUMINACLIP:$trueseq:2:30:10:8:true LEADING:5 TRAILING:5 SLIDINGWINDOW:4:15 MINLEN:36\n\njava -jar $TRIMMOMATIC/trimmomatic-0.36.jar PE ../RAW_READS/T3_rep1_500k_R1.fastq.gz ../RAW_READS/T3_rep1_500k_R2.fastq.gz -baseout T3_rep1.fastq.gz \\\nILLUMINACLIP:$trueseq:2:30:10:8:true LEADING:5 TRAILING:5 SLIDINGWINDOW:4:15 MINLEN:36\n\njava -jar $TRIMMOMATIC/trimmomatic-0.36.jar PE ../RAW_READS/T3_rep2_500k_R1.fastq.gz ../RAW_READS/T3_rep2_500k_R2.fastq.gz -baseout T3_rep2.fastq.gz \\\nILLUMINACLIP:$trueseq:2:30:10:8:true LEADING:5 TRAILING:5 SLIDINGWINDOW:4:15 MINLEN:36\n\nexit 0\n\nCorrer el script trimmomatic.slrm\n\nsbatch trimmomatic.slrm\nsqueue\n\nCrear carpetas TRIM_P y TRIM_U y mover los archivos que correspondan a cada carpeta.\n\nls \nmkdir TRIM_P TRIM_U\nmv *U.fastq.gz TRIM_U/\nmv *P.fastq.gz TRIM_P/\nls \nls TRIM_P/\n\nAhora se recomienda revisar las secuencias pareadas con FastQC y MultiQC como se realizó en los pasos anteriores. Para ello deben moverse a la carpeta FASTQC_POST para correr el script.\n\ncd ../FASTQC/FASTQC_POST/\nfastqc -t 8 ../../TRIMMOMATIC/TRIM_P/*.fastq.gz -o ./               \nls \n\nCorrer el script de MultiQC en la carpeta respectiva y checar archivo .html\n\ncd ../../MULTIQC/POST\nsource activate multiqc_py2.7\nmultiqc ../../FASTQC/FASTQC_POST/*.zip -o ./ --data-format json --export\n\n\nsource deactivate multiqc_py2.7\n\nRevisar el archivo .html obtenido con MultiQC dentro de la carpeta POST.\nCerrar esta terminal en cuanto se termine de revisar el archivo .html\n\nEn caso de haber problemas con las rutas de los programas, se puede generar un bash_profile con las rutas de todos los programas:\nPegar en el .bash_profile los paths de los programas que serán utilizados durante el curso.\n\nnano .bash_profile\n\nPegar los siguientes path de los programas que serán utilizados durante el análisis transcriptómico.\n\n# Software for transcriptomic analysis\nexport PATH=$PATH:/LUSTRE/apps/bioinformatica/FastQC_v0.11.7\nexport PATH=$PATH:/LUSTRE/bioinformatica_data/genomica_funcional/bin/Trimmomatic-0.36\nexport PATH=$PATH:/LUSTRE/apps/bioinformatica/trinityrnaseq-2.4.0\nexport PATH=$PATH:/LUSTRE/apps/bioinformatica/trinityrnaseq-2.4.0/util\nexport PATH=$PATH:/LUSTRE/apps/bioinformatica/trinityrnaseq-2.4.0/Analysis/DifferentialExpression\nexport PATH=$PATH:/LUSTRE/apps/bioinformatica/trinityrnaseq-2.4.0/trinity-plugins/parafly-code/bin\nexport PATH=$PATH:/LUSTRE/apps/bioinformatica/trinityrnaseq-2.4.0/trinity-plugins/parafly/bin\nexport R_LIBRARY_PATH=/LUSTRE/apps/R-3.3.1/lib64/R/library\nexport PATH=$PATH:/LUSTRE/bioinformatica_data/genomica_funcional/bin/ncbi-blast-2.4.0+/bin\nexport PATH=$PATH:/LUSTRE/apps/bioinformatica/TransDecoder-3.0.1\nexport PATH=$PATH:/LUSTRE/bioinformatica_data/RNA/ricardo/bioinformatics/transdecoder\nexport PATH=$PATH:/LUSTRE/bioinformatica_data/genomica_funcional/bin/signalp-4.1\nexport PATH=$PATH:/LUSTRE/bioinformatica_data/genomica_funcional/bin/tmhmm-2.0c/bin\nexport PATH=$PATH:/LUSTRE/bioinformatica_data/genomica_funcional/bin/Trinotate/util/rnammer_support\nexport PATH=$PATH:/LUSTRE/bioinformatica_data/genomica_funcional/bin/rnammer\nexport PATH=$PATH:/LUSTRE/bioinformatica_data/genomica_funcional/bin/hmmer-3.1b2-linux-intel-x86_64/binaries\nexport PATH=$PATH:/LUSTRE/apps/bioinformatica/Trinotate/PerlLib\nexport PATH=$PATH:/LUSTRE/apps/bioinformatica/Trinotate/auto\nexport PATH=$PATH:/LUSTRE/apps/bioinformatica/samtools-1.7/bin\nexport PATH=$PATH:/LUSTRE/apps/bioinformatica/bowtie2\nexport PATH=$PATH:/LUSTRE/bioinformatica_data/genomica_funcional/bin/RSEM\nexport PATH=$PATH:/LUSTRE/bioinformatica_data/genomica_funcional/Laura/bin/transrate-1.0.3-linux-x86_64/transrate\n\nActualizar el archivo .bash_profile\n\nsource .bash_profile"
  },
  {
    "objectID": "walkthrough.html",
    "href": "walkthrough.html",
    "title": "Hello, Quarto",
    "section": "",
    "text": "Markdown is an easy to read and write text format:\n\nIt’s plain text so works well with version control\nIt can be rendered into HTML, PDF, and more\nLearn more at: https://quarto.org/docs/authoring/"
  },
  {
    "objectID": "walkthrough.html#code-cell",
    "href": "walkthrough.html#code-cell",
    "title": "Hello, Quarto",
    "section": "Code Cell",
    "text": "Code Cell\nHere is a Python code cell:\n\nimport os\nos.cpu_count()\n\n8"
  },
  {
    "objectID": "walkthrough.html#equation",
    "href": "walkthrough.html#equation",
    "title": "Hello, Quarto",
    "section": "Equation",
    "text": "Equation\nUse LaTeX to write equations:\n\\[\n\\chi' = \\sum_{i=1}^n k_i s_i^2\n\\]"
  }
]