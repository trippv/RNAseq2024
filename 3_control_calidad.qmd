---
title: "Control de Calidad"
format: html
editor: visual
execute:
  warning: false
  message: false
  eval: false
---



Moverse a la carpeta `curso2024` y crear carpeta de trabajo `Transcriptomica` y acceder.

```{default}
cd curso2024
mkdir Transcriptomica 
cd Transcriptomica
```

# 1. Control de cálidad con FASTQC con lecturas de prueba

## Lecturas de prueba

Antes de análizar las secuencias de nuestro estudio, vamos a ver unos ejemplos de cálidad de secuencias. Estas secuencias se obtuvieron de bases de datos publicas. 

:::callout-warning

**Ojo: Estas lecturas solo son una submuestra de las originales, por lo que son mucho mas pequeñas.** 

:::


1. Creamos una carpeta parental llamada `FASTQC_TEST` y dentro de esta, generamos las carpetas `secuencias`, `FASTQC_PRE` y `FASTQC_POST`. 

```{default}    
mkdir -p fastqc_test/{secuencias,fastqc_pre,fastqc_post}
```


2. Dentro de la carpeta `secuencias `vamos a crear un link simbólico de las secuencias que serán utilizadas. 


::: callout-info
Recuerda la sintaxis:

 `ln -s ORIGEN DESTINO`
:::


```{default}
cd fastqc_test/secuencias
ln -s /home/mtripp/CURSO_RNASEQ2024/fastqc_test/secuencias/*.gz ./
ls
```

:::callout-warning
# ¿Como saber cuantas lecturas tiene cada archivo?

Podemos utilizar la función `grep` para buscar un caracter en común de todas las lecturas y hacer pipe para contar el número de lineas que tienen ese caracter

Por ejemplo: las lectutas SRR7096024_1.fastq, podemos utilizar el ID @SRR7096024_1

```{default}
zcat SRR7096024_1.fastq.gz | grep "^@SRR70" | wc -l
```
:::

 
3. Posteriormente ejecutamos `FASTQC`. Para esto nos vamos a colocar en la carpeta `fastqc_pre` y generamos el siguiente script

```{default}
#!/bin/bash

lecturas=/home/mtripp/CURSO_RNASEQ2024/fastqc_test/secuencias

fastqc $lecturas/*.fastq.gz -t 8 -o ./
```


4. Descargamos los reportes HTML generados a **nuestra computadora** en la carpeta de trabajo para revisarlo. Para esto, abrimos una nueva ventana de la terminal y vamos a generar una carpeta llamada `FASTQC_TEST`

```{default}
$LAPTOP-NNNNN:$mkdir -p FASTQC_TEST/{FASTQC_PRE,FASTQC_POST}

cd FASTQC_TEST/FASTQC_PRE
```

:::{.callout-note}
# Nota
Recuerda la sintaxis: 
```{default}
scp curso##@omica:ruta/de/la/carpeta/*.html ./

```
:::

5. Revisión individual de archivos .html en navegador firefox o en el navegador que tengan instalado, para verificar la calidad de las lecturas de secuenciación.

```{default}
firefox SRR10858532_1_fastqc.html
firefox SRR10858532_2_fastqc.html
```

:::{.callout-note}
#
 Si estas utilizando ubuntu app, dentro de la carpeta de trabajo ejecuta: 

`explorer.exe SRR10858532_1_fastqc.html`
:::


6. Revisa cada uno de los reportes y discute cuales son las diferencias entre la calidad de las lecturas


___

## 2. Limpieza y control de calidad de las lecturas

Ahora utilizaremos el Programa [Trimmomatic](http://www.usadellab.org/cms/uploads/supplementary/Trimmomatic/TrimmomaticManual_V0.32.pdf) para cortar y filtrar las lecturas con baja calidad asi como eliminar adaptadores que puderan haber permanecido en la lecturas


Para correr `Trimmomatic` crearemos un código `bash` donde indicaremos los archivos que vamos a procesar. El procedimiento es el siguiente:


1. Crear la carpeta `trimmomatic` en la carpeta dentro de la carpeta de `fastqc_test` y acceder a ella.

```{default}
cd ..
mkdir trimmomatic
cd trimmomatic
```


2. Generar el script al cual llamaremos `2.trimmomatic.sh`
```{default}
nano 2.trimmomatic.sh
```

:::{.callout-caution}
# Importante

No se te olvide que tienes que tener activado el ambiente de conda de `trinity`

```{default}
conda activate trinity
```

:::

El archivo bash debe contener lo siguiente:

```{default}
#!/bin/bash

# ruta aal archivo fasta con las secuencias de los adaptadores
trueseq="/home/mtripp/CURSO_RNASEQ2024/trimmomatic/adapters/TruSeq3-PE.fa" 

# Define los archivos donde se guardarán los mensajes y errores del proceso.
LOG_FILE="trimmomatic.log"  # Aquí se guarda el registro de lo que hace el programa
ERR_FILE="trimmomatic.err"  # Aquí se guardan los errores si ocurre algún problema


trimmomatic PE -threads 4 ../secuencias/SRR7096024_1.fastq.gz ../secuencias/SRR7096024_2.fastq.gz \
 -baseout trimmed_SRR7096024.fastq.gz \
ILLUMINACLIP:$trueseq:2:30:10:8:true LEADING:5 TRAILING:5 SLIDINGWINDOW:4:15 MINLEN:36 \
1>> $LOG_FILE 2>> $ERR_FILE

trimmomatic PE -threads 4 ../secuencias/SRR10858532_1.fastq.gz ../secuencias/SRR10858532_2.fastq.gz \
 -baseout trimmed_SRR10858532.fastq.gz \
ILLUMINACLIP:$trueseq:2:30:10:8:true LEADING:5 TRAILING:5 SLIDINGWINDOW:4:15 MINLEN:36 \
   1>> $LOG_FILE 2>> $ERR_FILE

trimmomatic PE -threads 4 ../secuencias/rv06m_S8_L001_1.fastq.gz ../secuencias/rv06m_S8_L001_2.fastq.gz \
-baseout trimmed_rv06m_S8_L001.fastq.gz \
ILLUMINACLIP:$trueseq:2:30:10:8:true LEADING:5 TRAILING:5 SLIDINGWINDOW:4:15 MINLEN:36 \
  1>> $LOG_FILE 2>> $ERR_FILE

```

2. Cambia los permisos de ejecución del código con el siguiente comando:

```{default}
chmod +x 2.trimmomatic.sh
```


3. FInalmente ejecuta el código

```{default}
./2.trimmomatic.sh
```

4. Generar dos carpetas para colocar las lecturas _Paired_ y las _Unpaired_. Posteriormente, mueve todas las lecturas a sus respectivas carpetas usando el comando `mv`

```{default}
mkdir TRIMM_U TRIMM_P

mv *P.fastq TRIMM_P/
mv *U.fastq TRIMM_U/
```

6. Ahora evalua la calidad de estas lecturas limpias con FastQC dentro de la carpeta `FASTQC_TEST/FASTQC_POST`. Para esto, puedes generar un nuevo archivo slrm para usar FastQC

```{default}
#!/bin/bash
#SBATCH -p cicese
#SBATCH --job-name=fastqc
#SBATCH --output=fastqc-%j.log
#SBATCH --error=fastqc-%j.err
#SBATCH -N 1
#SBATCH --ntasks-per-node=8
#SBATCH -t 6-00:00:00


# Exportar la ruta de FastQC_v0.11.7
export PATH=$PATH:/LUSTRE/apps/bioinformatica/FastQC_v0.11.7


fastqc ../trimmomatic/TRIMM_P/*.fastq -t 8 -o ./

```
7. Finalmente, transfiere los reportes nuevos a tu computadora para revisarlos

8. Ahora vamos a repetir  los pasos del 3 al 7 pero con la misma muestra pero usando parametros mas riguroso:

    Generar el script al cual llamaremos `trimmomatic_rig.slrm`
```{default}
nano run_trimmomatic_rig.slrm
```



El slrm debe contener lo siguiente:
```{default}
#!/bin/sh

###Directivas

#SBATCH -p cicese
#SBATCH --job-name=trimmomatic
#SBATCH --output=trimmomatic-%j.log
#SBATCH --error=trimmomatic-%j.err
#SBATCH -N 1
#SBATCH --ntasks-per-node=8
#SBATCH -t 06-00:00:00


TRIM=/LUSTRE/bioinformatica_data/genomica_funcional/bin/Trimmomatic-0.36

cd ${SLURM_SUBMIT_DIR}

java -jar $TRIM/trimmomatic-0.36.jar PE ../SRR7096024_1.fastq ../SRR7096024_2.fastq -baseout trimmed_rig_SRR7096024.fastq \
ILLUMINACLIP:TruSeq3-PE-2.fa:2:30:10:8:true LEADING:5 TRAILING:5 SLIDINGWINDOW:4:20 MINLEN:36 HEADCROP:5

exit 0
```


Transfiere los archivos a tu computadora para visualizarlos. Discute los principales cambios 

9. Finalmente, corre los pasos del 3 al 7 incluyendo todas las muestras. 



# 2. Análisis de RNAseq


A partir de este punto empezaremos a analizar las lecturas que se utilizarán en el resto del curso.

Para utilizarlas, genera un enlace simbólico de la carpeta donde están las lecturas crudas

```{default}
cd transcriptomica
ln -s /LUSTRE/bioinformatica_data/genomica_funcional/Tripp/Curso_2021/RAW_READS ./
ls
```
La carpeta `RAW_READS` contiene un set de 16 archivos `.fastq` con secuencias o lecturas crudas provenientes de una secuenciación en un equipo Illumina HISEQ-4000 en formato pair-end de gónada de ostiones *Crassostrea virginica* indiferenciados expuestos a tres diferentes concentraciones de hidrocarburos. Este subconjunto de muestras en su totalidad está compuesto por 8 millones de lecturas. Los tratamientos son los siguientes:
	
* 	Ctrl: ostiones en el día en que arranca la exposición a hidrocarburos, sin petróleo.
* 	T1: ostiones en el día 7 de exposición a 200 ug/L
* 	T2: ostiones en el día 14 de exposición a 200 ug/L
* 	T3: ostiones en el día 21 de exposición a 200 ug/L
* 	rep1: réplica biológica 1
* 	rep2: réplica biológica 2
* 	R1: Lectura forward
* 	R2: Lectura reverse


![](https://i.imgur.com/7JkC0Ww.jpg)


Verificar el formato del archivo `.fastq.gz` y obtener el número de secuencias de cada archivo.

```{default}
cd RAW_READS
zcat Ctrl_rep1_500k_R1.fastq.gz | head
zcat Ctrl_rep1_500k_R1.fastq.gz | grep "^@M03978" | wc -l

# Imprimirá en pantalla el número de coincidencias (Lecturas) por archivo.
find . -type f -name "*.fastq.gz" | xargs zgrep -c "^@M03978"				
```
---

## 2.1 Análisis de calidad de las lecturas con [FastQC](https://dnacore.missouri.edu/PDF/FastQC_Manual.pdf) y [MultiQC](https://multiqc.info/) 

### FASTQC

En la carpeta de `transcriptomica`, crear carpeta `FASTQC` y con las subcarpetas `FASTQC_PRE` y `FASTQC_POST`. Acceder a carpeta `FASTQC_PRE`

```{default}
cd ..
mkdir -p FASTQC/{FASTQC_PRE,FASTQC_POST}
cd FASTQC/FASTQC_PRE/
```
Realizar análisis de calidad de las secuencias con el programa `FastQC`. Se obtendrán N archivos `.html` y `fastqc.zip` . Sintaxis `fastqc [-t # ] [path to file] [-o output dir]`


:::callout-warning 
**NOTA:** Para realizar este paso es posible utilizar el script `accesa-nodo` para solicitar un nodo en el cluster sin necesidad de hacer un archivo *slurm*
:::


```{default}
fastqc -t 8 ../../RAW_READS/*.fastq.gz -o ./ 	
```
```{default}
ls  	
```

A continuación, vamos a importar los archivos `.html` a nuestra PC. Para ello sigan las instrucciones siguientes:

**Paso 1.** Abrir una nueva terminal para
**Paso 2.** Acceder a nuestra carpeta de `transcrptomica`
```{default}
$ cd Documentos/curso2022/transrciptomica
```
**Paso 3.** Crear en `transcriptomica` un directorio con el nombre `FASTQC` y dentro de él, dos que se llamen `FASTQC_PRE` y `FASTQC_POST`.
```{default}
$ mkdir -p FASTQC/{FASTQC_PRE,FASTQC_POST}
```
**Paso 4.** Acceder al directorio `FASTQC_PRE`
```{default}
$ cd FASTQC_PRE
```
**Paso 5.** Copiar dentro de este directorio todos los archivos `.html` que generamos en el cluster.
```{default}
$ scp curso01@omica:/home/curso01/curso2022/trascriptomica/FASTQC/FASTQC_PRE/*.html ./
```
**Paso 6.** Revisión individual de archivos `.html` en navegador `firefox` o en el navegador que tengan instalado, para verificar la calidad de las lecturas de secuenciación. 
```{default}
$ firefox Ctrl_rep1_500k_R1_fastqc.html 
```

:::callout-info
:bulb: Si estas trabajando con Ubuntu app, puedes buscar directamente los archivos en la carpeta, pero si deseas abrir chrome directamente de la terminal ejecuta la siguiente linea:


\
export chrome="/mnt/c/Program\ Files\ \(x86\)/Google/Chrome/Application/chrome.exe"
:::



### MULTIQC 
Si se quiere hacer una comparación entre todos los valores de calidad de las secuencias, se puede utilizar el programa `MultiQC` que utiliza los archivos generados por `FastQC`. Se requiere un ambiente para el programa que está basado en `python 2.7`


:::callout-warning
Para poder utilizar MultiQC es necesario cargar el modulo de python 2.7 y posteriormente activar el ambiente donde esta MultiQC



```{default}

# Para cargar el ambiente conda
$ module load python-2.7-anaconda 		

# Activar ambiente
$ source activate multiqc_py2.7					

# Para desactivar ambiente:
$ source deactivate multiqc_py2.7					
```
:::

Dentro de la carpeta de `FASTQ_PRE` crear una carpeta llamada `MULTIQC`. Entramos a esta carpeta y corremos MultiQC activando el ambiente `multiqc_py2.7`. Se generaran las carpetas `multiqc_data`, `multiqc_plots` y `multiqc_reports.html`. Revisar archivo `.html`. Al finalizar desactivar el ambiente `multiqc_py2.7`.
```{default}	
$ mkdir MULTIQC
$ cd MULTIQC/
$ multiqc ../*.zip -o ./ --data-format tsv --export --title "Analisis pre trimming"
```
```{default}
$ source deactivate multiqc_py2.7
```
Revisar el archivo `.html` obtenido con `MultiQC` dentro de la carpeta `PRE` y descargarlo a su computadora personal siguiendo los pasos descritos anteriormente


```{default}

cd Documentos/curso2022/transrciptomica/FASTQC_PRE
mkdir Multiqc
cd Multiqc
scp curso01@omica:/home/curso01/curso2022/trascriptomica/FASTQC/FASTQC_PRE/Multiqc/multiqc_report.html ./
   
```
**3.** Revisar el archivo `.hmtl` obtenido con el programa `MultiQC`
```{default}
firefox multiqc_report.html
```
**4.** Cerrar esta terminal en cuanto se termine de revisar el archivo `.html`

---
## 2.2. Limpieza y eliminación de lecturas de mala calidad con [Trimmomatic](http://www.usadellab.org/cms/uploads/supplementary/Trimmomatic/TrimmomaticManual_V0.32.pdf)

:::callout-warning
Como utilizaremos trimmomatic con un archivo *slurm* en este punto debes salir del nodo
:::

En este paso se usará el programa `Trimmomatic`, para eliminar las secuencias de mala calidad, así como índices o adaptadores de secuenciación que pudieran haber quedado.

Crear la carpeta `TRIMMOMATIC` en la carpeta `transcriptomica` y acceder a ella.
```{default}
cd ../../
mkdir TRIMMOMATIC
cd TRIMMOMATIC
```

Generar el script al cual llamaremos `trimmomatic.slrm`
```{default}
nano trimmomatic.slrm
```
El slrm debe contener lo siguiente:
```{default}
#!/bin/bash
#########################################################
#TRIMOMMATIC

## Directivas
#SBATCH --job-name=qtrim
#SBATCH --output=trimmomatic-%j.log
#SBATCH --error=trimmomatic-%j.err
#SBATCH -N 1
#SBATCH --mem=20GB
#SBATCH --ntasks-per-node=8
#SBATCH -t 6-00:00:00
#SBATCH -p cicese


# Ruta a TRIMMOMATIC
TRIMMOMATIC=/LUSTRE/bioinformatica_data/genomica_funcional/bin/Trimmomatic-0.36

#Ruta al archivo con los adaptadores
trueseq="$TRIMMOMATIC/adapters/TruSeq3-PE-2.fa"


cd ${SLURM_SUBMIT_DIR}

java -jar $TRIMMOMATIC/trimmomatic-0.36.jar PE ../RAW_READS/Ctrl_rep1_500k_R1.fastq.gz ../RAW_READS/Ctrl_rep1_500k_R2.fastq.gz -baseout Ctrl_rep1.fastq.gz \
ILLUMINACLIP:$trueseq:2:30:10:8:true LEADING:5 TRAILING:5 SLIDINGWINDOW:4:15 MINLEN:36

java -jar $TRIMMOMATIC/trimmomatic-0.36.jar PE ../RAW_READS/Ctrl_rep2_500k_R1.fastq.gz ../RAW_READS/Ctrl_rep2_500k_R2.fastq.gz -baseout Ctrl_rep2.fastq.gz \
ILLUMINACLIP:$trueseq:2:30:10:8:true LEADING:5 TRAILING:5 SLIDINGWINDOW:4:15 MINLEN:36

java -jar $TRIMMOMATIC/trimmomatic-0.36.jar PE ../RAW_READS/T1_rep1_500k_R1.fastq.gz ../RAW_READS/T1_rep1_500k_R2.fastq.gz -baseout T1_rep1.fastq.gz \
ILLUMINACLIP:$trueseq:2:30:10:8:true LEADING:5 TRAILING:5 SLIDINGWINDOW:4:15 MINLEN:36

java -jar $TRIMMOMATIC/trimmomatic-0.36.jar PE ../RAW_READS/T1_rep2_500k_R1.fastq.gz ../RAW_READS/T1_rep2_500k_R2.fastq.gz -baseout T1_rep2.fastq.gz \
ILLUMINACLIP:$trueseq:2:30:10:8:true LEADING:5 TRAILING:5 SLIDINGWINDOW:4:15 MINLEN:36

java -jar $TRIMMOMATIC/trimmomatic-0.36.jar PE ../RAW_READS/T2_rep1_500k_R1.fastq.gz ../RAW_READS/T2_rep1_500k_R2.fastq.gz -baseout T2_rep1.fastq.gz \
ILLUMINACLIP:$trueseq:2:30:10:8:true LEADING:5 TRAILING:5 SLIDINGWINDOW:4:15 MINLEN:36

java -jar $TRIMMOMATIC/trimmomatic-0.36.jar PE ../RAW_READS/T2_rep2_500k_R1.fastq.gz ../RAW_READS/T2_rep2_500k_R2.fastq.gz -baseout T2_rep2.fastq.gz \
ILLUMINACLIP:$trueseq:2:30:10:8:true LEADING:5 TRAILING:5 SLIDINGWINDOW:4:15 MINLEN:36

java -jar $TRIMMOMATIC/trimmomatic-0.36.jar PE ../RAW_READS/T3_rep1_500k_R1.fastq.gz ../RAW_READS/T3_rep1_500k_R2.fastq.gz -baseout T3_rep1.fastq.gz \
ILLUMINACLIP:$trueseq:2:30:10:8:true LEADING:5 TRAILING:5 SLIDINGWINDOW:4:15 MINLEN:36

java -jar $TRIMMOMATIC/trimmomatic-0.36.jar PE ../RAW_READS/T3_rep2_500k_R1.fastq.gz ../RAW_READS/T3_rep2_500k_R2.fastq.gz -baseout T3_rep2.fastq.gz \
ILLUMINACLIP:$trueseq:2:30:10:8:true LEADING:5 TRAILING:5 SLIDINGWINDOW:4:15 MINLEN:36

exit 0
```
Correr el script `trimmomatic.slrm` 
```{default}
sbatch trimmomatic.slrm
squeue
```
Crear carpetas `TRIM_P` y `TRIM_U` y mover los archivos que correspondan a cada carpeta.
```{default}
ls 
mkdir TRIM_P TRIM_U
mv *U.fastq.gz TRIM_U/
mv *P.fastq.gz TRIM_P/
ls 
ls TRIM_P/
```
Ahora se recomienda revisar las secuencias pareadas con `FastQC` y `MultiQC` como se realizó en los pasos anteriores. Para ello deben moverse a la carpeta `FASTQC_POST` para correr el script.
```{default}
cd ../FASTQC/FASTQC_POST/
fastqc -t 8 ../../TRIMMOMATIC/TRIM_P/*.fastq.gz -o ./  				
ls 
```
Correr el script de `MultiQC` en la carpeta respectiva y checar archivo `.html`
```{default}
cd ../../MULTIQC/POST
source activate multiqc_py2.7
multiqc ../../FASTQC/FASTQC_POST/*.zip -o ./ --data-format json --export
```
``` {r}
source deactivate multiqc_py2.7
```
Revisar el archivo `.html` obtenido con `MultiQC` dentro de la carpeta `POST`.



Cerrar esta terminal en cuanto se termine de revisar el archivo `.html`

---

En caso de haber problemas con las rutas de los programas, se puede generar un bash_profile con las rutas de todos los programas:


Pegar en el `.bash_profile` los paths de los programas que serán utilizados durante el curso.
```{default}
nano .bash_profile
```
Pegar los siguientes `path` de los programas que serán utilizados durante el análisis transcriptómico. 
```{default}
# Software for transcriptomic analysis
export PATH=$PATH:/LUSTRE/apps/bioinformatica/FastQC_v0.11.7
export PATH=$PATH:/LUSTRE/bioinformatica_data/genomica_funcional/bin/Trimmomatic-0.36
export PATH=$PATH:/LUSTRE/apps/bioinformatica/trinityrnaseq-2.4.0
export PATH=$PATH:/LUSTRE/apps/bioinformatica/trinityrnaseq-2.4.0/util
export PATH=$PATH:/LUSTRE/apps/bioinformatica/trinityrnaseq-2.4.0/Analysis/DifferentialExpression
export PATH=$PATH:/LUSTRE/apps/bioinformatica/trinityrnaseq-2.4.0/trinity-plugins/parafly-code/bin
export PATH=$PATH:/LUSTRE/apps/bioinformatica/trinityrnaseq-2.4.0/trinity-plugins/parafly/bin
export R_LIBRARY_PATH=/LUSTRE/apps/R-3.3.1/lib64/R/library
export PATH=$PATH:/LUSTRE/bioinformatica_data/genomica_funcional/bin/ncbi-blast-2.4.0+/bin
export PATH=$PATH:/LUSTRE/apps/bioinformatica/TransDecoder-3.0.1
export PATH=$PATH:/LUSTRE/bioinformatica_data/RNA/ricardo/bioinformatics/transdecoder
export PATH=$PATH:/LUSTRE/bioinformatica_data/genomica_funcional/bin/signalp-4.1
export PATH=$PATH:/LUSTRE/bioinformatica_data/genomica_funcional/bin/tmhmm-2.0c/bin
export PATH=$PATH:/LUSTRE/bioinformatica_data/genomica_funcional/bin/Trinotate/util/rnammer_support
export PATH=$PATH:/LUSTRE/bioinformatica_data/genomica_funcional/bin/rnammer
export PATH=$PATH:/LUSTRE/bioinformatica_data/genomica_funcional/bin/hmmer-3.1b2-linux-intel-x86_64/binaries
export PATH=$PATH:/LUSTRE/apps/bioinformatica/Trinotate/PerlLib
export PATH=$PATH:/LUSTRE/apps/bioinformatica/Trinotate/auto
export PATH=$PATH:/LUSTRE/apps/bioinformatica/samtools-1.7/bin
export PATH=$PATH:/LUSTRE/apps/bioinformatica/bowtie2
export PATH=$PATH:/LUSTRE/bioinformatica_data/genomica_funcional/bin/RSEM
export PATH=$PATH:/LUSTRE/bioinformatica_data/genomica_funcional/Laura/bin/transrate-1.0.3-linux-x86_64/transrate
```
Actualizar el archivo .bash_profile
```{default}
source .bash_profile
```
---
