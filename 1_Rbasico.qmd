---
title: "R y Rstudio: Comandos Basicos"
author: "Miguel Tripp"
---

## Introducción

![](https://www.askideas.com/media/31/Dont-Panic-And-Carry-A-Towel-Picture.jpg)

R es un lenguaje de programación y un entorno de software libre dedicado principalmente al análisis estadístico y la visualización de datos. Desarrollado inicialmente por los laboratorios de AT&T a pártir de otro lenguaje de programación.

Entre las caracteristicas que han hecho de R un lenguaje muy popular entre la comunidad científica y academica (ademas de que es gratuito 😉 ) es su capacidad para manejar y analizar grandes conjuntos de datos, junto con una vasta colección de paquetes desarrollados por la comunidad, lo hace altamente versátil y poderoso.

Además, R se destaca por su capacidad para crear gráficos de alta calidad y visualizaciones interactivas, lo que facilita la interpretación y comunicación de resultados complejos. La facilidad de integración con otros lenguajes y sistemas, así como su fuerte enfoque en la reproducibilidad de la investigación, han cimentado su lugar como una herramienta indispensable para científicos, estadísticos y analistas de datos en todo el mundo.

¿Mencioné que R es gratuito?

------------------------------------------------------------------------

## Generalidades

En este primer capítulo vamos a revisar algunas funcionalidades básicas de R tales como crear objetos y vectores asi como revisar los diferentes tipos de estructuras de datos.

Antes de empezar, es importante mencionar algunas aspectos:

-   R es sensible a las mayúsculas y minúsculas, de manera que `A` es diferente que `a` de la misma forma que la función `anova()` es diferente a la función `Anova()`

-   El símbolo `#` sirve para insertar un comentario en la línea de comando, de manera que todo lo que siga después de `#` no se ejecutara. Es importante incluir comentarios como parte de las buenas practicas en el uso de R ya que le facilitará el trabajo a tus colaboradores y revisores saber que estas haciendo en casa paso y te salvará la vida cuando intentes correr tu script cinco años después de haberlo escrito

-   En la consola usualmente veremos el símbolo `>` lo que la indica que la consola esta lista para recibir nuevas instrucciones. Si por el contrario vemos el símbolo `+` entonces nos esta indicando que no hemos terminado de completar correctamente una línea de código.

-   Si despúes de ejecutar un comando la consola nos arroja un mensaje de advertencia `WARNING` significa que el comando se ejecutó pero hay algo inesperado que debe revisarse. Por el contrario si nos arroja un mensaje de error `ERROR` entonces hay algo mal en la línea de codigo y por lo tanto no se pudo ejecutar.

## Uso de la línea de comando como calculadora

Podemos utilizar R para realizar operaciones básicas:

```{r basicas, echo=TRUE, include=TRUE}
1 + 2 #suma

4 - 3 #resta

5 * 5 #multiplicación

4 / 2 #división

4 ^ 2 #Exponente

4 ** 2 #Exponente
```

::: callout-warning
# **!! ¿por qué hay un \[1\] en cada resultado?**

El resultado es un vector, aunque solo consista en un elemento. Por lo tanto, R indica que este el primer \[1\] elemento de un vector
:::

Operadores en R:

| Operador |    significado    |
|:--------:|:-----------------:|
|    \*    |  Multiplicación   |
|    \-    |       Resta       |
|    \+    |       Suma        |
|    \^    | Elevar a potencia |
|    /     |     División      |
|    \<    |     Menor que     |
|    \>    |     Mayor que     |
|   \<=    | Menor o igual que |
|   \>=    | Mayor o igual que |
|    ==    | Exactamente igual |
|    !=    |     Distinto      |

## Uso de objetos

Para crear un nuevo objeto se puede usar "=" o "\<-". Este nuevo objeto, se almacenará en la memoria y se puede usar para otras operaciones.

```{r variable, echo=TRUE,warning=FALSE, results=FALSE}

x <- 2 #asignar a la variable x el valor de 2
x

y = 3 #asignar a la variable y el valor de 3
y

#resultado de la suma x + y
x + y

z <- x + y #asiganr el resultado de x + y  a la variable z
z


```

Las variables no solo puede contener números, sino caracteres, listas o incluso graficas

```{r more variables, echo=TRUE}
caracter <- "siete"
caracter

```

::: callout-tip
# Ejercicio:

1.  ¿cual serial el resultado de multiplicar la variable *mix* \* 3?

2.  ¿Cuales de estas formas de definir una variables es incorrecta?

-   `mi.variable <-`

-   `mi_variable <-`

-   `mi variable <-`

-   `mi-variable <-`
:::

## Tipos y estructura de datos (Classes)

R tiene los siguientes tipos de datos basicos:

-   `logical:` valores lógicos, pueden ser *TRUE* o *FALSE*
-   `numeric:` números reales *(1.0,2,3.1416, 3E-10)*
-   `character:`caracteres (letras y/o números). Delimitados por "" *("uno", "Miguel", "FALSO")*
-   `interger:`valores enteros *(1,2,3)*
-   `NA:` dato no disponible
-   `NaN:`no es un número (not a number)

Por otro lado, las estructuras de datos pueden ser de tipo vector, data.frame, matriz, arreglo o lista:

<img src="http://venus.ifca.unican.es/Rintro/_images/dataStructuresNew.png"/>

fuente: <http://venus.ifca.unican.es/Rintro/_images/dataStructuresNew.png>

Es importante resaltar que solamente los data.frame pueden contener distintos tipos de datos (números, caracteres, etc) mientras que el resto solo puede contener un tipo de dato (solo carácteres, solo números, etc).

------------------------------------------------------------------------

Si no sabes que tipo de dato contiene una variable, se puede sar la función `class()`

```{r uso class, echo=TRUE, include=TRUE}

class(x)      

class(caracter)     

```

::: callout-note
# ¿Funciones? 🤔


R utiliza **funciones** para realizar operaciones, por ejemplo `class()`. Para utilizar una función deben especificarse determiandos *argumentos*, los cuales se escriben dentro del parentesis.


Una ventaja de utilizar Rstudio, es que al abrir una función, automaticamente te desplegará las opciones de argumentos. Por ejemplo, escribe en la terminal `round()`. Tras completarse la función, te desplegara la información `round(x, digits = 0)` donde x es el objecto (número o vector) y digits es el número de decimales.


:::



## Trabajando con vectores

Un vector es la estructura de datos más sencilla en R. Un vector es una colección de uno o más datos del **mismo tipo**.

Para crear un **vector** utilizamos el comando `c()`, de combinar

```{r}
numeros <- c(1, 2, 3)

numeros
```


También podemos crear un nuevo vector a partir de otros objetos en el ambiente

```{r}
x

y

z

variables <- c(x, y, z)
variables
```



Los vectores tambien puende contener elementos de otros tipos como **caracteres**, los cuales tienen que ir dentro de comillas `" "`. 

```{r}
nombres <- c("Juan", "Pepe", "Sofia")
```


:::callout-warning
# 
¿Que pasa si intentamos unir el vector de caracteres (`nombres`) con numeros (`variables`)

```{r}
nombre_variable <- c(nombres, variables)
nombre_variable
```


Como las cadenas de texto son el tipo de dato más flexible, siempre que creamos un vector que incluye un dato de este tipo, el resultado será un vector de texto.

:::


Podemos crear vectores de secuencias numéricas usando `:`. De un lado de los dos puntos escribimos el número de inicio de la secuencia y del otro el final.

Por ejemplo, creamos una secuencia del 1 al 10

```{r}
1:10
```

### Vectorización de operaciones

Las operaciones aritméticas y relacionales pueden vectorizarse. Si las aplicamos a un vector, la operación se realizará para cada uno de los elementos que contiene.

Por ejemplo, podemos sumar 2 a cada uno de los elementos del vector `numeros`

```{r}
numeros + 2
```



También podemos realizar operaciones relacionales (VERDADERO, FALSO) con nuestro vector. Por ejemplo, evaluar cual de nuestro elementos es mayor a 4

```{r}
numeros > 4
```





**Ejercicio:**

Supon que tienes un cultivo de abulones y tienes que revisarlo todos los dias y contar los organismos muertos. Despues de una semana tienes el siguiente resultado:

-   lunes: 4
-   martes: 6
-   miercoles: 0
-   jueves: 10
-   viernes: 12
-   sabado: 8
-   domingo: 4

1: crea un vector con los valores diarios 2: nombre cada valor con el dia de la semana usando la funcion `names()`

```{r ejercicio 1, echo= TRUE}

mortalidad <- c(4,6,0,10,12,8,4)
mortalidad


names(mortalidad) <-  c("Lunes", "Martes", "Miercoles", "Jueves", "Viernes", "Sabado", "Domingo")

mortalidad
#nombrar la mortalidad con la funcion names


```

Operaciones basicas con vectores

| Función  | significado                  |
|----------|------------------------------|
| min()    | Minimo                       |
| max()    | Máximo                       |
| length() | longitud                     |
| range()  | intervalo de valores         |
| sort()   | Ordena de menor a mayor      |
| unique() | Valores unicos               |
| mean()   | Promedio                     |
| sum()    | suma                         |
| which()  | proporciona los indices TRUE |

**Ejercicio:** Contesta lo siguiente:

-   ¿cual fue el valor minimo y el maximo?
-   ¿cuantos abulones murieron esa semana?

## Indices

Usar índices para obtener subconjuntos es el procedimiento más universal en R, pues funciona para todas las estructuras de datos.

Un índice en R representa una posición. Cuando usamos índices le pedimos a R que extraiga de una estructura los datos que se encuentran en una o varias posiciones específicas dentro de ella.

Para obtener subconjuntos con índices escribimos corchetes [] después del nombre de un objeto. Dentro de los corchetes escribimos el o los números que corresponden a la posición que nos interesa extraer del objeto.

```{r indices, echo = TRUE}
mortalidad[1]

```

Mostrar todos los valores *excepto* el segundo

```{r all but, echo=TRUE}

mortalidad[-2]

```

Se puede obtener multiples series de elementos al mismo tiempo usando `c()`

```{r}
mortalidad[c(1,2:4)]
```

o si por el contrario queremos eliminar estos elementos se usa `c(-)`

```{r}
mortalidad[-c(1,2:4)]
```

Obtener los dias en donde la mortalidad fue mayor a 5

```{r indices 2, echo=TRUE}
mortalidad > 5

#Mostrar solo los dias donde la mortalidad fue > 5
mortalidad[mortalidad > 5]

```

**Ejercicio**

Identificar:

-   ¿En que dia se observó la menor mortalidad?
-   ¿Que dias tuvieron una mortalidad igual a 12?
-   ¿Que dias tuvieron una mortalidad menor al promedio?



# Data.Frames

Los data frames son estructuras de datos de dos dimensiones (rectangulares) que pueden contener datos **de diferentes tipos**, por lo tanto, son heterogéneas. Esta estructura de datos es la más usada para realizar análisis de datos.

Podemos entender a los data frames como una versión más flexible de una matriz. Mientras que en una matriz todas las celdas deben contener datos del mismo tipo, los renglones de un data frame admiten datos de distintos tipos, pero sus columnas conservan la restricción de contener datos de un sólo tipo.



Podemos utilizar los vectores que ya tenemos (`numeros` y `nombres`) para hacer un data.frame de estos vectores


```{r}
mi_df <- data.frame(numeros = numeros,
                    nombres = nombres)

mi_df
```



:::callout-warning
# Ejercicio

Crea un nuevo data.frame con la siguiente información

```{r}
Nombre <- c("Alex", "Lilly", "Mark", "Oliver", "Martha", "Lucas", "Caroline")
Edad <- c(25, 31, 23, 52, 76, 49, 26)
Altura <- c(177, 163, 190, 179, 163, 183, 164)
Peso <- c(57, 69, 83, 75, 70, 83, 53)
Sexo <- as.factor(c("M", "M", "H", "H", "M", "H", "M"))
```




```{r}

mi_df <- data.frame(Nombre, Edad, Altura, Peso, Sexo)

```

:::


## Acceder a elementos de un data.frame

Para acceder a los elementos de un data.frame podemos utilizar el simbolo `$` o utilizando indices `[F, C]` donde el primer elemento antes de la coma, son las filas y el segundo elemento las columnas. 


Por ejemplo, para acceder al vector de los nombres

```{r}
mi_df$Nombre
```

o usando los indices

```{r}
mi_df[ , 1]
```

:::callout-tip
#
Para acceder a todas las filas de una determinada columna, dejamos ese espacio en blanco antes de la coma. Por el contrario si queremos seleccionar la primera fila de todas las columnas utilizariamos:

```{r}
mi_df[1, ]
```

:::


o podemos usar el nombre de la columna dentro del indice

```{r}
mi_df[, "Nombre"]
```




#  Matrices y arreglos

Las matrices y arrays pueden ser descritas como vectores multidimensionales. Al igual que un vector, únicamente pueden contener datos de un sólo tipo, pero además de largo, tienen más dimensiones.

En un sentido estricto, las matrices son una caso especial de un array, que se distingue por tener específicamente dos dimensiones, un “largo”" y un “alto”. Las matrices son, por lo tanto, una estructura con forma rectangular, con renglones y columnas.

### Creación de matrices

Para crear una matriz se usa la función `matrix()`, la cual usa los argumentos `nrow` y `ncol`. Con ellos se especifica el número de renglones y columnas que tendrá nuestra matriz. 

```{r matriz, echo = TRUE}
#matriz sin especificar renglones ni columnas
matrix(1:12)
```


Ahora usamos la misma serie de números pero definiendo 3 filas y 4 columnas

```{r}
matrix(1:12, nrow = 3, ncol = 4)
```

Ahora usando la misma serie de números pero con 4 filas y 3 columnas

```{r}
matrix(1:12, nrow = 4, ncol = 3)
```


:::callout-warning
#
  *   ¿Que pasa si definimos un menor número de filas y columnas que el número de elementos?   
  
  *   ¿Que pasa si usamos un número mayor de filas y columnas que el número total de elementos
:::


### Convertir matrices a data frames y viceversa

Para convertir una matriz a data frame, se usa la función `as.data.frame()` mientras que para el caso contrario se usa `as.matrix()`. 
Es importante tomar en cuenta la naturaleza de cada estructura: las matrices solo aceptan un solo tipo de dato

Por ejeplo, tenemos la matriz:
```{r, include =TRUE, echo=TRUE}
matriz <- matrix(1:12, 3,4)
matriz
```

se convierte a data.frame

```{r, include=TRUE, echo=TRUE}
matriz_df <- as.data.frame(matriz)
matriz_df
```




## Arreglos
son similares a las matrices pero pueden contener 2 o mas dimensiones

```{r}
arreglo <- array(1:24, dim = c(2,3,4))
arreglo
```










![](https://i.pinimg.com/564x/c8/9a/21/c89a214708211c988c0cca2bb46798b3.jpg)
